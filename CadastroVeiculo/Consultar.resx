<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAABQAAAAQAAAACAAAAAwAA
        AAYAAAAIAAAACAAAAAMAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAGgAAAFgAAAB8AAAAbwAA
        AF8AAABxAAAAgAAAAIwAAACMAAAAZQAAAFAAAABGAAAAPAAAADoAAAA7AAAANgAAACwAAAAfAAAAEwAA
        AAkAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABcFBQWYGxoa7Rwb
        G/oeGxv3Dw0N8iIhIfciIB/6HhwZ+x8cGfsREA7zBwYG7QkICOgZFxjjHx4f4iEhIuIfHx/eDw8P1gAA
        AMYAAACxAAAAiAAAADYAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAW0xJ
        R/KqpqX/bmln/yMiIv8MDQ3/MTI1/6Skp/9bWlz/SklK/z8/P/9KSkz/g4OJ/1NSVf80MjP/NzU2/0JB
        Qv9FQ0X/NzU3/h0cHf4nJyj5OTk5zwAAAF4AAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ABYTExOsgHdz/5uZmv9gXV3/ICAg/woKCv8eHh7/lpOY/1JNUv8aGBn/CAgI/1dXW/9mZ2n/IyIj/y4s
        Lf89Ozz/SkhK/1dVVv9bWVv/WVZZ/yMjI/83ODn+UVFT2g4ODhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAMAAAAkCwsLiU1JSPBvZ2T/T01M/5iSkP8WFhb/CQkJ/w8PD/88Oz3/Hx4g/xMUFf8WFhf/NDQ2/xsc
        Hf8bGxz/HR4f/x0dH/8hICL/LSwu/z06PP9WUlX/TkpN/xwbHP8dHR7/GhoaRAAAAAAAAAAAAAAAAAAA
        AA8AAAAhAAAATzw7P7lNS1D5TklI/09HRf9mX17/gnt4/wkJCf8ICAj/CAgI/w4ODv8LCwv/CwsL/woK
        Cv8NDg7/CQkJ/wkJCv8NDQ7/DQ0N/xgXGP8rKSv/LCor/yQiI/8kISP/LSos/1BNT/8wKy50AAAAAAAA
        AABkX1s4Hhwc2Q8PD+RtbHDtU1NX/hYWFv85Njb/LCsr/2RbWf9TTk3/CAgI/wgICP8XFxf/SkhI/zk3
        N/8cGxv/FxYW/x0dHf8RERH/HBwc/y8vL/85OTn/ODc3/1lYWf8pKSr/IyIj/ygoKf8dHR3/EhIS/xoZ
        GZgAAAAAAAAAANLNy4UxLy7/Pz9B/ykpKv8LCwv/CQkJ/yknJ/9oYF3/RD89/xYWFv8NDQ3/JCgq/3yD
        h/97d3X/aGRk/3NwcP8fHR3/FhQU/xwcHP8lJSX/Kysr/ywsLP87Ozv/WFdX/z8/P/8+Pj//RUVG/zY1
        Nf8vLi//S0hLaQAAAAAAAAAAlY2Lmzg1Nf8UFBX/CAgI/wgICP8ICAj/CQkJ/19YV/+KhYT/IiIi/xUV
        Fv9pe4f/eoKJ/2xpaf9rZmT/Yl9d/wsLC/8MDAz/JSUm/1FRUf9VVFX/TU1N/0xMTP8yMjL/T05P/2dn
        Z/9lZWX/JyYl/1ZTVdUAAAABAAAAAAAAAAB6cW+gUUxM/woKCv8JCQn/CQkJ/woKCv8yMjT/EhMT/xUU
        FP8cHB3/Ghsb/xYXF/8uLi//CgoK/wkJCf8SEBH/Dw4O/wkJCf8ICAj/CAgI/w4ODv8pJSf/XVZX/21l
        a/+LgYn/fXB3/2BYXv8cGhr+Xl5ecQAAAAIAAAAAAAAAAGZjYaSKh4j/gX+B/29tb/8sLC7/ICAh/wwM
        DP8NDQ3/XVhd/xQTFP8mJib/jYyN/zk3Of86NTn/U0tQ/0Q8QP8rJij/Mi0v/zItMP9bWV3/qaWu/8C7
        xf+4s7z/pJul/4V5gf+VipT/dXR32z1QSF8AVSQVAD8ABAAAAAAAAAAAcnR3eIiGiP9zcXT/Ghkb/w0N
        Df8NDQ3/MzI0/4SChf+bl53/UE1Q/11ZXf9/dnz/Zlxj/1xRWP9jWF//d2t0/4h8hf+PhY7/qKKs/7St
        t/+ooav/gXmA/1dNUv9IQUT0V2NdvVV8ZXsDVRlFBFkjOQBZIiUAXBcLAAAAAAD/AAF3jYgtmpeb+oWC
        hv83NDb/ERAR/yYlJv8qKSv/VlVX/4SBhP8tKy3/Mi0w/1FJTv9cU1n/bGFn/4h8hP+QhY3/lYuU/4d9
        hf96cHf/YVpf/TBLOuAdUzHHFGYvrAVzLJADcSqEAnMqdwJ0LmkFczRYBHMxPgB1MRoAVQADAJkzBQeW
        SyJsqItzWWlc1UVNRuw0O0T7PUFH/yUlJ/8PFhv/DQ8P/hYeJP8pPkL0QmF9/k5aaf9lemrsY5R23H6k
        i9+RrJvmoK2l9YiEhu9LTUzOEH04ng94NZgPejiQC3Y5nxCBQ60McTqLFH1Gihh4Q2odekdPI3xNKziN
        VQkqKioGN2A+JR9jNykfUy4xDSwUSmx/hG5DT2OpPT0//VB9bO9wi4+uSmqCuomHholgaXbTgo+eubau
        qp+9urqUrLeyvY2OjPRlg3PdF0QnjTkqHlRFPzBUOiQbU1hVR04aeEBXHohR0RViMIQkhVagPzMnQDQn
        GjpLS0EvqqqqAx8fAAhXSjEpAAAAAAAAAAA8Kh4qlod3QmdncRtHQkXDKS0l4jczLuFGPzzWU0tJ2FdL
        S/1tY2PiXVVV3GBZWcRvaWqbYF1aWiqqbh4hMxw2alhHVldQRClreGsTMzMzCgAAAABeZEtRHXxBK2KR
        amIAAAAEHBwcCT4+Nyn///8BAAAAAzMzGQoAAAAAAAAAAFpBOR+OhHoyAAAAAAAAAAAAAAAAAAAAAH9/
        fwKZmZkFe2paH0hIJAdbSEgOAAAAAAAAAAAAAAAAAAAAAAAAAAqIdmdW4sbGCQAAAAAAAAAAAAAAAFU4
        OAkAAAAAVUsvGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAL+/fwT//38CAAAAAP8A
        AAH/qqoD1Kp/BgAAAAAAAAAA/39/Av/akQfuzJkP6MeQF/PQlhbUqn8GAAAAAJyRjDEAAAAAAAAAAAAA
        AAAAAAAAAAAAAP/MmQXlzJkKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//38C/6pVA+nJ
        lBjpxJEj7siWPfDMmVrtx5dK9ciaHOnJlBjwyJYz78iWQvDKlkTvyJdU78iZQd+/fwgAAAAAAAAAAAAA
        AAAAAAAA//8AAfHJkxPnuYsL8MmWR/fPlyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/9CiC+3K
        lTrvyZhD8ciZS/DLl0XwypZY8cmZc+7JmD7vz58Q7seVLuvKlTXwzJkj78iaIefFlhbxyZMT7syZD/9/
        fwIAAAAA/9R/BvLMmRTwypYi8MmXVu/KmGHwyZZa7smYPv//fwIAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD/zJkF8MuXRe/HlWHvyZdl78mYcu7Kl37wyZho8cqWJ+bCkRXzyZor7seUPO/IlkLwyZZH8MyZRvDK
        mUTvyJlB7MiWOPDKlTXxy5dK78qYUvDLl1nvyZdl8MmYd+3KlR3yzJkU5cyZCv//AAEAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADwyZdW8MiXiPDKmJzwyZex78qYqe/JlpDwyZla8siXKu7Ll0/vy5dU8MqYV/HK
        mFzuyZZf8cqWXfDMmVrvypVh8MmYaO/KmHXxypiE8MqXkfDIl5vwyZeZ8MqYV+/HlyAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////AfHKmFzwyZiw8MqXz+/JltrvypfG8MmXme/Kl3TuyJde7sqWXe/L
        l2Pwypdq78mWc/DKmHrwypd578iXdvDJmX3wyZiL78iWpO/Jl8XvyJfZ78mY2O7Kl8/wyZee8syZKAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA7siXL/HKmJPwypeR8MqXvvDJlonvyZZz78qWcPHK
        mHDvyZZz78uXdu/Kl4fwyZeZ8MmXo+/Il6XvyZej78mXp/DKl77wyZfA8MmY0+/JmOnvyZfc7siWeu/L
        l1TUqn8GAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//38C57mLC///AAHyypk/78iXdvDK
        l4jvyZiG8MmXiu/JmJDwypia78mXsu7Jl6/wype+78qX1PDKmNDvypja78mX8e/Kl+3vyZfp78mYxPDK
        mZH/zJkKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6b+UDO7M
        mS3uyJaf8MmXo+/Jl6LwyZet78qXs/DJl77wyZe778qYqe/Kl7fwypfP78mXUe/Kl4fvyZjJ8MmXme/J
        l6fwy5dZ78iaIQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAD/zJkF7syZLe7JmG3wyZla8MqYV+/Jl2Dxyphh8cqYcPHKl7fvyZfR8MmXwO/Jl8rwy5ds7sqYXOfQ
        iwv/AAABqqpVA/TJlBjuzJkPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAD/v38E7syZLfPFlhYAAAAAAAAAAAAAAAAAAAAA//8AAe/JmEPvy5dU8MmXivDJ
        l7vuypaf88maKwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADxyZMT78aTMv/MmQqqqlUD37+fCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/4Af//4AAAf+AAAD/AAAAfwAAAHwAAABwAAAAYAAAAGAAAABgAAAAYAA
        AAGAAAABgAAAAQAAAAAAAAAAAAAAADAAAIAzweOv+RgXz/AAHg/gAAgH4AAAA/AAAA/gAAAP8AAAD/AA
        AD/8AAB//AAAf/48B////4P///////////8=
</value>
  </data>
</root>